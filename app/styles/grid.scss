/**
 * Profound Grid
 *
 * Built in Sass (SCSS) this responsive/adaptive grid supports both fixed and fluid layouts,
 * relative and fixed gutters, as well as your choice of semantic markup or generic '.grid-x' classes.
 *
 * The biggest difference to other grid systems is the use of negative margins for column
 * placements, avoiding the subpixel rounding issues that usually break/uglify fluid layouts
 * in some browsers.
 *
 * Nested columns are supported too, without having to reset the grid on each level.
 *
 * Credits/Inspiration:
 * -------------------
 * Semantic Grid: http://www.semantic.gs
 * Susy: http://susy.oddbird.net
 * Negative Grid: http://chrisplaneta.com/freebies/negativegrid-fluid-css-grid-by-chris-planeta/
 *
 * @author Profound Creative Studio
 * @url http://www.profoundgrid.com
 * @url http://www.weareprofound.com
 */
////////////////////////////////////////////////////////////////////////////////
// Defaults (feel free to override)
////////////////////////////////////////////////////////////////////////////////

$total_columns:   12;     //        //
$total_width:   960px;    // px|100%    // px = fixed, 100% = fluid
$gutter_width:    1%;     // px|%     // px = fixed, % = fluid
$container_margin:  1%;     // auto|px|%  //

$class_container: 'row';    //        //
$class_column:    'col';    //        //
$class_push:    'push';   //        //


////////////////////////////////////////////////////////////////////////////////
// GRID MATH
////////////////////////////////////////////////////////////////////////////////

@function element_width($column_index){
  @if ($total_width == 100%){
    $not_rounded_value: (((100% + $gutter_width)/$total_columns)*$column_index)-$gutter_width;
    $not_rounded_value: $not_rounded_value * 100;
    $rounded_value: round($not_rounded_value)/100;
    @return $rounded_value;
  }@else{
  @return ((($total_width + $gutter_width)/$total_columns)*$column_index)-$gutter_width;
  }
  }

@function column_width(){
  @if ($total_width == 100%){
    $not_rounded_value: (((100 + $gutter_width)/$total_columns))-$gutter_width;
    $not_rounded_value: $not_rounded_value * 100;
    $rounded_value: round($not_rounded_value)/100;
    @return $rounded_value * 1%;
  }@else{
  @return ($total_width - ($gutter_width*($total_columns - 1)))/$total_columns;
  }
  }

@function container_width(){
  @if ($total_width == 100%){
    @if ($container_margin == auto){
      @return 100%;
    }
    @return 100% - 2*$container_margin;
  } @else {
  @return $total_width;
  }
  }
////////////////////////////////////////////////////////////////////////////////
// BASIC MIXINS
////////////////////////////////////////////////////////////////////////////////

/**
 * Clearfix
 */
@mixin clearfix(){
  overflow: hidden;
  *zoom: 1;
  }

/**
 * Legacy Clearfix
 */
@mixin legacy-pie-clearfix(){
  *zoom: 1;

  :after {
    content: "\0020";
    display: block;
    height: 0;
    clear: both;
    overflow: hidden;
    visibility: hidden;
  }
  }

/**
 * Establish the grid-containing element.
 */
@mixin container(){
  width: container_width();
  margin: 0 $container_margin;
  }

/**
 * Align an element to the grid.
 */
@mixin column($_columns_width, $_padding_columns:null){
  float: left;
  margin-right: -100%;
  $_width_perc: element_width($_columns_width);
  width: $_width_perc;

  @if($_padding_columns != null){
    @include push($_padding_columns);
  }
  }
